<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore" xmlns:dropbox="http://www.mulesoft.org/schema/mule/dropbox" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">

    <http:request-config name="harvest-request-config" host="harvest.greenhouse.io" port="443" basePath="v1" doc:name="HTTP Request Configuration" protocol="HTTPS">
    </http:request-config>
    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration"/>
    <http:request-config name="dropbox-content-upload" protocol="HTTPS" host="content.dropboxapi.com" port="443" basePath="2" doc:name="HTTP Request Configuration"/>
    <flow name="convert-candidates-to-csv">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/candidates" allowedMethods="GET" doc:name="HTTP"/>
        <flow-ref name="harvest-candidates-flow" doc:name="Fetch Candidates From Harvest"/>
        <dw:transform-message doc:name="Transform Message" metadata:id="a200dad2-a93c-4285-97be-edea2f7b02a5">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/csv
---
payload map ((payload01 , indexOfPayload01) -> {
	"Candidate ID": payload01.candidate_id,
	"First Name": payload01.first_name,
	"Last Name": payload01.last_name,
	Company: payload01.company,
	Title: payload01.title,
	"Is Private Candidate": payload01.is_private as :string,
	"Photo URL": payload01.photo_url,
	"Email Addresses": payload01.emails[0]
})]]></dw:set-payload>
        </dw:transform-message>
        <echo-component doc:name="Echo"/>
    </flow>
    <flow name="fetch-applications-and-candidates">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/applications" allowedMethods="GET" doc:name="HTTP">
            <http:response-builder statusCode="200"/>
        </http:listener>
        <set-variable variableName="authorization" value="#[message.inboundProperties.'Authorization']" doc:name="Set Authorization From Header"/>
        <set-variable variableName="maxPages" value="9999" doc:name="Set maxPages"/>
        <set-variable variableName="page" value="1" doc:name="Set page"/>
        <set-variable variableName="perPage" value="10" doc:name="Set perPage"/>
        <set-variable variableName="lastActivityAfter" value="#[server.dateTime.plusDays(-7)]" doc:name="Set lastActivityAfter"/>
        <set-variable variableName="data" value="#[[]]" doc:name="Set Data to Empty List"/>
        <flow-ref name="fetch-applications-with-paging" doc:name="Fetch Applications from Harvest" metadata:id="50488820-0996-453f-9492-478f14c76c97"/>
        <foreach doc:name="For Each">
            <flow-ref name="fetch-candidate-per-application" doc:name="Fetch Each Candidate Per Application and Add to Data"/>
        </foreach>
        <dw:transform-message doc:name="Convert into one big CSV" metadata:id="ee2ac156-e3cf-4797-a81d-857fc8431382">
            <dw:input-payload mimeType="application/java"/>
            <dw:input-variable mimeType="application/java" variableName="data"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/csv quoteValues=true
---
(flatten flowVars.data) map ((payload01 , indexOfPayload01) -> {
	application_id: payload01.application_id,
	candidate_id: payload01.candidate_id,
	prospect: payload01.prospect as :string,
	job_ids: payload01.job_ids default [] joinBy ",",
	first_name: payload01.first_name,
	last_name: payload01.last_name,
	source: payload01.source,
	referrer: payload01.referrer,
	current_stage: payload01.current_stage,
	emails: payload01.emails default [] joinBy ",",
	company: payload01.company,
	title: payload01.title,
	last_activity: payload01.last_activity,
	is_private: payload01.is_private,
	photo_url: payload01.photo_url
})]]></dw:set-payload>
        </dw:transform-message>
        <flow-ref name="upload-to-dropbox" doc:name="Upload File to Dropbox"/>
        <echo-component doc:name="Echo"/>
    </flow>
    <flow name="upload-to-dropbox">
        <http:request config-ref="dropbox-content-upload" path="files/upload" method="POST" doc:name="Upload File to Dropbox">
            <http:request-builder>
                <http:header headerName="Content-Type" value="text/plain;charset=dropbox-cors-hack"/>
                <http:header headerName="Dropbox-API-Arg" value="{&quot;path&quot;: &quot;/exports/candidates.csv&quot;}"/>
                <http:header headerName="Authorization" value="Bearer yd5bJoazLrAAAAAAAAADNA7wvajpZQ3Dy_XaKcTzlkPAQ3XWJs7lAZYt9fcfklOa"/>
            </http:request-builder>
        </http:request>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="Failure: #[message] #[payload]" level="INFO" doc:name="Logger"/>
        </catch-exception-strategy>
    </flow>
    <flow name="fetch-all">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/all" allowedMethods="GET" doc:name="HTTP"/>
        <set-variable variableName="authorization" value="#[message.inboundProperties.'Authorization']" doc:name="Set Authorization From Header"/>
        <set-variable variableName="maxPages" value="5" doc:name="Set maxPages"/>
        <set-variable variableName="perPage" value="100" doc:name="Set perPage"/>
        <set-variable variableName="page" value="1" doc:name="Set page"/>
        <set-variable variableName="data" value="#[[]]" doc:name="Set Initial Data"/>
        <flow-ref name="fetch-applications-with-paging" doc:name="Fetch Application Data from Harvest"/>
    </flow>
    <flow name="fetch-applications-with-paging">
        <scripting:component doc:name="Sleep for 1ms">
            <scripting:script engine="jruby"><![CDATA[sleep(0.1)]]></scripting:script>
        </scripting:component>
        <flow-ref name="greenhouse-fetch-applications" doc:name="Fetch Applications from Greenhouse" metadata:id="a1220840-73f7-4dbf-a88d-e80c8dc6b5f6"/>
        <set-variable variableName="isMore" value="#[payload.size() &gt; 0 and flowVars.page &lt; flowVars.maxPages]" doc:name="Check To See If There Is More Data" metadata:id="04fd8191-7ca3-464b-828a-1491f1db89c0"/>
        <expression-component doc:name="Expression"><![CDATA[flowVars.data.add(payload)]]></expression-component>
        <logger message="Payload is: #[payload]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[isMore]">
                <set-variable variableName="page" value="#[Integer.parseInt(flowVars.page) + 1]" doc:name="Increment page"/>
                <flow-ref name="fetch-applications-with-paging" doc:name="Flow Reference"/>
            </when>
            <otherwise>
                <set-payload value="#[flowVars.data]" doc:name="Set Payload"/>
                <dw:transform-message doc:name="Transform Message" metadata:id="52006cdc-c0f2-4284-bdc3-19d9ede597c2">
                    <dw:input-payload mimeType="application/java"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
flatten payload map ((payload01 , indexOfPayload01) -> {
	application_id: payload01.application_id,
	candidate_id: payload01.candidate_id,
	prospect: payload01.prospect,
	applied_at: payload01.applied_at,
	rejected_at: payload01.rejected_at,
	last_activity_at: payload01.last_activity_at,
	source: payload01.source,
	job_ids: payload01.job_ids map ((jobid , indexOfJobid) -> jobid),
	referrer: payload01.referrer,
	current_stage: payload01.current_stage
})]]></dw:set-payload>
                </dw:transform-message>
                <echo-component doc:name="Echo"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="fetch-candidate-per-application">
        <set-variable variableName="application" value="#[payload]" doc:name=" Set Application Data"/>
        <set-variable variableName="candidateId" value="#[payload.candidate_id]" doc:name="Set Candidate ID"/>
        <scripting:component doc:name="Sleep for 1ms">
            <scripting:script engine="jruby"><![CDATA[sleep(0.1)]]></scripting:script>
        </scripting:component>
        <flow-ref name="greenhouse-fetch-candidate-flow" doc:name="Fetch Candidate Information"/>
        <dw:transform-message doc:name="Merge Candidate and Application Data into CSV Row" metadata:id="76fe4147-c858-4f52-9a3a-b94b843f95c8">
            <dw:input-payload mimeType="application/java"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	application_id: flowVars.application.application_id as :string,
	prospect: flowVars.application.prospect,
	job_ids: flowVars.application.job_ids map ((jobId, i) -> jobId),
	source: flowVars.application.source default "",
	referrer: flowVars.application.referrer default "",
	candidate_id: flowVars.application.candidate_id default "",
	current_stage: flowVars.application.current_stage default "",
	first_name: payload.first_name,
	last_name: payload.last_name,
	emails: payload.emails default [],
	company: payload.company default "",
	title: payload.title default "",
	last_activity: flowVars.application.last_activity_at as :string default "",
	is_private: payload.is_private as :string default "false",
	photo_url: payload.photo_url default ""
}]]></dw:set-payload>
        </dw:transform-message>
        <expression-transformer expression="#[flowVars.data.add(payload)]" doc:name="Add Merged Data onto Data List"/>
    </flow>
    <flow name="harvest-candidates-flow">
        <http:request config-ref="harvest-request-config" path="candidates" method="GET" doc:name="Request Candidates from Harvest">
            <http:request-builder>
                <http:query-param paramName="per_page" value="100"/>
                <http:query-param paramName="page" value="1"/>
                <http:header headerName="Authorization" value="#[flowVars.authorization]"/>
            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="Transform Message" metadata:id="1199df5f-b896-4777-98f4-5dfe3989fb36">
            <dw:input-payload mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map ((payload01 , indexOfPayload01) -> {
	candidate_id: payload01.id as :string,
	first_name: payload01.first_name,
	last_name: payload01.last_name,
	company: payload01.company,
	title: payload01.title,
	is_private: payload01.is_private,
	photo_url: payload01.photo_url,
	emails: payload01.email_addresses.value
})]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    <flow name="greenhouse-fetch-applications">
        <http:request config-ref="harvest-request-config" path="applications" method="GET" doc:name="Request Applications from Harvest">
            <http:request-builder>
                <http:query-param paramName="per_page" value="#[flowVars.perPage]"/>
                <http:query-param paramName="page" value="#[flowVars.page]"/>
                <http:query-param paramName="last_activity_after" value="#[flowVars.lastActivityAfter]"/>
                <http:header headerName="Authorization" value="#[flowVars.authorization]"/>
            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="Transform Message" metadata:id="bd3b14ee-ff30-477a-afab-12a4c5474f3d">
            <dw:input-payload mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map ((payload01 , indexOfPayload01) -> {
	application_id: payload01.id,
	candidate_id: payload01.candidate_id,
	prospect: payload01.prospect,
	applied_at: payload01.applied_at,
	rejected_at: payload01.rejected_at,
	last_activity_at: payload01.last_activity_at,
	source: payload01.source.public_name,
	job_ids: payload01.jobs default [] map ((j, i) -> j.id),
	referrer: payload01.credited_to.name,
	current_stage: payload01.current_stage.name
})]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    <flow name="greenhouse-fetch-candidate-flow">
        <http:request config-ref="harvest-request-config" path="candidates/#[flowVars.candidateId]" method="GET" doc:name="Request Single Candidate from Harvest">
            <http:request-builder>
                <http:header headerName="Authorization" value="#[flowVars.authorization]"/>
            </http:request-builder>
            <http:success-status-code-validator values="200..599"/>
        </http:request>
        <choice doc:name="Choice">
            <when expression="#[message.inboundProperties['http.status'] != 200]">
                <logger message="No Candidate Data Received! Status: #[message.inboundProperties['http.status']]" level="INFO" doc:name="Logger"/>
                <set-payload value="{
  candidate_id: &quot;&quot;,
  first_name: &quot;Candidate&quot;,
  last_name: &quot;Deleted&quot;,
  company: &quot;&quot;,
  title: &quot;&quot;,
  is_private: false,
  photo_url: &quot;&quot;,
  emails: []
}" doc:name="Set Payload" metadata:id="3498bbf0-a2f4-4dd7-8ae9-ebb44712e06f"/>
            </when>
            <otherwise>
                <dw:transform-message doc:name="Transform Message" metadata:id="613ea5b1-81c1-472e-8701-a71ac4d2534b">
                    <dw:input-payload mimeType="application/json"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	candidate_id: payload.id as :string,
	first_name: payload.first_name,
	last_name: payload.last_name,
	company: payload.company,
	title: payload.title,
	is_private: payload.is_private,
	photo_url: payload.photo_url,
	emails: payload.email_addresses map ((e, i) -> e.value) when (payload.email_addresses?) otherwise []
}]]></dw:set-payload>
                </dw:transform-message>
            </otherwise>
        </choice>
    </flow>
</mule>
